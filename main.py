import time
import json

from telebot import types
from telebot import TeleBot
from telebot.types import Message

import message_text
import translate
import database
import parsers

TOKEN = ''
bot = TeleBot(TOKEN)


class MarkupManager:
	def __init__(self):
		super(MarkupManager, self).__init__()
	
	def update(self, message):
		authorization = Authorization()
		translator = Translator()
		# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		status_auth = authorization.status(message.chat.id)
		# –†–∞–∑–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
		if status_auth == 3:
			# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
			isTranslat = translator.status(message.chat.id)
			if isTranslat:
				markup = self.getTranslat()
			else:
				markup = self.getAuth()
		elif status_auth == 0 or status_auth == None:
			markup = self.getUnAuth()
		else:
			markup = self.getGoAuth()
		return markup

	def getTranslat(self):
		# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
		markup=types.ReplyKeyboardMarkup()
		markup.row('‚ùå –í—ã—Ö–æ–¥')
		return markup

	def getGoAuth(self):
		# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		markup=types.ReplyKeyboardMarkup()
		markup.row('‚ùå –û—Ç–º–µ–Ω–∞')
		return markup

	def getUnAuth(self):
		# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
		markup=types.ReplyKeyboardMarkup()
		markup.row('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
		markup.row('üéà –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'üè´ –®–∫–æ–ª—ã')
		markup.row('üë®üèº‚Äçüíª –ü–æ–º–æ—â—å')
		return markup

	def getAuth(self):
		# –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
		markup=types.ReplyKeyboardMarkup()
		markup.row('üìö –î–æ–º–∞—à–∫–∞', 'üìã –û—Ü–µ–Ω–∫–∏')
		markup.row('üá¨üáß –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫', 'üè´ –®–∫–æ–ª—ã')
		markup.row('üéà –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '‚ùå –í—ã—Ö–æ–¥')
		markup.row('üë®üèº‚Äçüíª –ü–æ–º–æ—â—å')
		return markup

class StatusUsers:
	def __init__(self):
		super(StatusUsers, self).__init__()

	def getData(self):
		# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
		with open('databases/status_users.json') as f:
			data = json.load(f)
		return data

	def search(self, id):
		data = self.getData()
		array = data['users']
		low = 0
		high = len(array)-1
		# –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		while low <= high:
			mid = (low + high) // 2
			if id < array[mid]['id']:
				high = mid - 1
			elif id > array[mid]['id']:
				low = mid + 1
			else:
				return mid
		return None

	def read(self, id):
		status_id = self.search(id)
		if status_id == None:
			return None
		data = self.getData()
		# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
		status_user = data['users'][status_id]
		return status_user

	def change(self, id, key, value):
		data = self.getData()
		# –ò–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∫–ª—é—á—É
		data['users'][self.search(id)][key] = value
		# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
		with open('databases/status_users.json', 'w') as f:
			json.dump(data, f)

	def add(self, id):
		data = self.getData()
		status_id = self.search(id)
		new_status = {'id': id, 'Auth': 0, 'Translator': False}
		# –ï—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ñ–∞–π–ª–µ
		if status_id == None:
			# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			data['users'].append(new_status)
			# –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ id
			data['users'].sort(key=lambda x: x['id'])
		else:
			# –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–æ–≤—ã–µ
			data['users'][status_id] = new_status
		# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
		with open('databases/status_users.json', 'w') as f:
			json.dump(data, f)

class Translator:
	def __init__(self):
		super(Translator, self).__init__()
		self.statusUsers = StatusUsers()
		self.markupManager = MarkupManager()

	def status(self, id):
		# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		status_user = self.statusUsers.read(id)
		if status_user == None:
			return None
		# –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
		return status_user['Translator']

	def start(self, id):
		# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
		markup = self.markupManager.getTranslat()
		text = '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤–∫–ª—é—á—ë–Ω!\n–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É.'
		bot.send_message(id, text, reply_markup=markup)
		# –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
		self.statusUsers.change(id, 'Translator', True)

	def translat(self, id, text):
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
		bot.send_message(id, translate.translate(text))

	def stop(self, id):
		# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
		markup = self.markupManager.getAuth()
		# –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
		self.statusUsers.change(id, 'Translator', False)
		bot.send_message(id, '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω!',
			reply_markup=markup)

class Authorization:
	def __init__(self):
		super(Authorization, self).__init__()
		self.markupManager = MarkupManager()
		self.statusUsers = StatusUsers()

	def status(self, id):
		# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		status_user = self.statusUsers.read(id)
		if status_user == None:
			return None
		# –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		return status_user['Auth']

	def start(self, id, message):
		# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		status_id = self.status(id)
		# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
		if status_id == 0:
			# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
			markup = self.markupManager.getGoAuth()
			bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û',
				reply_markup=markup)
			# –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
			self.statusUsers.change(id, 'Auth', 1)

		elif status_id == 1:
			text = message.text.lower()
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –§–ò–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			isName = database.searchName(id, text)
			if isName:
				bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –õ–°')
				# –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
				self.statusUsers.change(id, 'Auth', 2)
			else:
				bot.send_message(id, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –§–ò–û')
				bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û')

		elif status_id == 2:
			text = message.text.lower()
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			isAccount = database.searchAccount(id, text)
			if isAccount:
				# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
				markup = self.markupManager.getAuth()
				text = '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!'
				bot.send_message(message.chat.id,
					text, reply_markup=markup)
				# –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
				self.statusUsers.change(id, 'Auth', 3)
			else:
				bot.send_message(id, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –õ–°')
				bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –õ–°')

		elif status_id == 3:
			bot.send_message(message.chat.id,
				'‚ö†Ô∏è –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!')

class Handler:
	def __init__(self):
		super(Handler, self).__init__()
		self.markupManager = MarkupManager()
		self.authorization = Authorization()
		self.translator = Translator()
		self.statusUsers = StatusUsers()

	def translate(self, message):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
		if message.text.lower() == '‚ùå –≤—ã—Ö–æ–¥':
			self.translator.stop(message.chat.id)
		else:
			self.translator.translat(message.chat.id, message.text)

	def startAuth(self, message):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
		if message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
			# –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
			self.statusUsers.change(message.chat.id, 'Auth', 0)
			# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
			markup = self.markupManager.getUnAuth()
			# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			database.deleteTempData(message.chat.id)
			bot.send_message(message.chat.id,
				'–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!', reply_markup=markup)
		else:
			self.authorization.start(message.chat.id, message)

	def authorized(self, message):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
		if message.text.lower() == 'üìö –¥–æ–º–∞—à–∫–∞':
			bot.send_message(message.chat.id,
				'–≠—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')

		elif message.text.lower() == 'üìã –æ—Ü–µ–Ω–∫–∏':
			bot.send_message(message.chat.id,
				'–≠—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!')

		elif message.text.lower() == 'üá¨üáß –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫':
			self.translator.start(message.chat.id)

		elif message.text.lower() == '‚ùå –≤—ã—Ö–æ–¥':
			# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
			markup = self.markupManager.getUnAuth()
			# –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
			self.statusUsers.change(message.chat.id, 'Auth', 0)
			bot.send_message(message.chat.id,
				'–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏!', reply_markup=markup)

		else:
			self.unAuthorized(message)

	def unAuthorized(self, message):
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
		if message.text.lower() == 'üë®üèº‚Äçüíª –ø–æ–º–æ—â—å':
			bot.send_message(message.chat.id, message_text.help())

		elif message.text.lower() == '‚úÖ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è':
			self.authorization.start(message.chat.id, message)

		elif message.text.lower() == 'üéà –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
			# –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
			events = parsers.pars_events()
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
			if len(events) == 0:
				bot.send_message(message.chat.id,
					'‚ùóÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç—É!')
			else:
				for event in events:
					text = 'üéà %s\n%s\n\n–°—Å—ã–ª–∫–∞:\n%s' % (
						event['name'],
						event['date'],
						event['link'])
					bot.send_message(message.chat.id, text)

		elif message.text.lower() == 'üè´ —à–∫–æ–ª—ã':
			# –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —à–∫–æ–ª
			centers = parsers.pars_centers()
			for center in centers:
				time_str = ''
				for time in center['time']:
					time_str = time_str + time + '\n'
				text = 'üè´ %s\n\n–ê–¥—Ä–µ—Å:\n%s\n\n%s\n%s' % (
					center['name'],
					center['adress'],
					time_str,
					center['email'])
				bot.send_message(message.chat.id, text)

		else:
			# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
			markup = self.markupManager.update(message)
			print('[%s][%s %s][–û—à–∏–±–∫–∞]: %s' % (
				message.chat.id,
				message.chat.first_name,
				message.chat.last_name,
				message.text))
			bot.send_message(message.chat.id,
				'‚ö†Ô∏è –û—à–∏–±–∫–∞!', reply_markup=markup)

class MessageManager:
	def __init__(self):
		super(MessageManager, self).__init__()
		self.authorization = Authorization()
		self.statusUsers = StatusUsers()
		self.translator = Translator()

	def start(self, message):
		# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		status_auth = self.authorization.status(message.chat.id)
		if status_auth == None:
			markupManager = MarkupManager()
			# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			self.statusUsers.add(message.chat.id)
			# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
			markup = markupManager.getUnAuth()
			bot.send_message(message.chat.id,
				message_text.start(), reply_markup=markup)
		else:
			bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏!')

	def commands(self, message):
		handler = Handler()
		# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		status_auth = self.authorization.status(message.chat.id)
		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
		if status_auth == 3:
			# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
			isTranslat = self.translator.status(message.chat.id)
			if isTranslat:
				handler.translate(message)
			else:
				handler.authorized(message)
		elif status_auth == 0:
			handler.unAuthorized(message)
		elif status_auth == None:
			self.statusUsers.add(message.chat.id)
			handler.unAuthorized(message)
		else:
			handler.startAuth(message)

@bot.message_handler(commands=['start'])
def startHandler(message):
	messageManager = MessageManager()
	messageManager.start(message)
	print('[%s][%s %s][–ö–æ–º–∞–Ω–¥–∞]: @start' % (message.chat.id,
		message.chat.first_name, message.chat.last_name))

@bot.message_handler(content_types=['text'])
def messageHandler(message: Message):
	messageManager = MessageManager()
	messageManager.commands(message)

while True:
	try:
		bot.polling(none_stop=True, interval=0, timeout=20)
	except Exception as E:
		time.sleep(1)